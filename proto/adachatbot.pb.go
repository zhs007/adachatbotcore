// Code generated by protoc-gen-go. DO NOT EDIT.
// source: adachatbot.proto

package adachatbotpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ChatPlatformType - chat platform type
type ChatPlatformType int32

const (
	// CPT_NONE - none
	ChatPlatformType_CPT_NONE ChatPlatformType = 0
	// CPT_TELEGRAM - telegram
	ChatPlatformType_CPT_TELEGRAM ChatPlatformType = 1
)

var ChatPlatformType_name = map[int32]string{
	0: "CPT_NONE",
	1: "CPT_TELEGRAM",
}
var ChatPlatformType_value = map[string]int32{
	"CPT_NONE":     0,
	"CPT_TELEGRAM": 1,
}

func (x ChatPlatformType) String() string {
	return proto.EnumName(ChatPlatformType_name, int32(x))
}
func (ChatPlatformType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_adachatbot_f803e5f523c93805, []int{0}
}

// ResourceType - resource type
type ResourceType int32

const (
	// RT_PAGE - This is a page
	ResourceType_RT_PAGE ResourceType = 0
	// RT_OTHER - This is other resource
	ResourceType_RT_OTHER ResourceType = 1
)

var ResourceType_name = map[int32]string{
	0: "RT_PAGE",
	1: "RT_OTHER",
}
var ResourceType_value = map[string]int32{
	"RT_PAGE":  0,
	"RT_OTHER": 1,
}

func (x ResourceType) String() string {
	return proto.EnumName(ResourceType_name, int32(x))
}
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_adachatbot_f803e5f523c93805, []int{1}
}

// UserInfo - user infomation
type UserInfo struct {
	// type - chat platform type
	Type ChatPlatformType `protobuf:"varint,1,opt,name=type,proto3,enum=adachatbotpb.ChatPlatformType" json:"type,omitempty"`
	// ChatPlatformUniqueID - user unique identifier  in this chat platform
	ChatPlatformUniqueID string `protobuf:"bytes,2,opt,name=ChatPlatformUniqueID,proto3" json:"ChatPlatformUniqueID,omitempty"`
	// userID - user unique identifier
	UserID               int64    `protobuf:"varint,100,opt,name=userID,proto3" json:"userID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_adachatbot_f803e5f523c93805, []int{0}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfo.Unmarshal(m, b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
}
func (dst *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(dst, src)
}
func (m *UserInfo) XXX_Size() int {
	return xxx_messageInfo_UserInfo.Size(m)
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetType() ChatPlatformType {
	if m != nil {
		return m.Type
	}
	return ChatPlatformType_CPT_NONE
}

func (m *UserInfo) GetChatPlatformUniqueID() string {
	if m != nil {
		return m.ChatPlatformUniqueID
	}
	return ""
}

func (m *UserInfo) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

// MarkdownData - markdown data
type MarkdownData struct {
	// strData - markdown string data
	StrData string `protobuf:"bytes,1,opt,name=strData,proto3" json:"strData,omitempty"`
	// binaryData - binary data map, it's like images
	BinaryData map[string][]byte `protobuf:"bytes,2,rep,name=binaryData,proto3" json:"binaryData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// templateName - template Name
	TemplateName string `protobuf:"bytes,10,opt,name=templateName,proto3" json:"templateName,omitempty"`
	// templateData - template data
	TemplateData string `protobuf:"bytes,11,opt,name=templateData,proto3" json:"templateData,omitempty"`
	// ui - user infomation
	Ui                   *UserInfo `protobuf:"bytes,100,opt,name=ui,proto3" json:"ui,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MarkdownData) Reset()         { *m = MarkdownData{} }
func (m *MarkdownData) String() string { return proto.CompactTextString(m) }
func (*MarkdownData) ProtoMessage()    {}
func (*MarkdownData) Descriptor() ([]byte, []int) {
	return fileDescriptor_adachatbot_f803e5f523c93805, []int{1}
}
func (m *MarkdownData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarkdownData.Unmarshal(m, b)
}
func (m *MarkdownData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarkdownData.Marshal(b, m, deterministic)
}
func (dst *MarkdownData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkdownData.Merge(dst, src)
}
func (m *MarkdownData) XXX_Size() int {
	return xxx_messageInfo_MarkdownData.Size(m)
}
func (m *MarkdownData) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkdownData.DiscardUnknown(m)
}

var xxx_messageInfo_MarkdownData proto.InternalMessageInfo

func (m *MarkdownData) GetStrData() string {
	if m != nil {
		return m.StrData
	}
	return ""
}

func (m *MarkdownData) GetBinaryData() map[string][]byte {
	if m != nil {
		return m.BinaryData
	}
	return nil
}

func (m *MarkdownData) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *MarkdownData) GetTemplateData() string {
	if m != nil {
		return m.TemplateData
	}
	return ""
}

func (m *MarkdownData) GetUi() *UserInfo {
	if m != nil {
		return m.Ui
	}
	return nil
}

// MarkdownStream - markdown stream data
type MarkdownStream struct {
	// totalLength - If the message is too long, it will send data in multiple msg, this is the total length.
	TotalLength int32 `protobuf:"varint,1,opt,name=totalLength,proto3" json:"totalLength,omitempty"`
	// curStart - The starting point of the current data (in bytes).
	CurStart int32 `protobuf:"varint,2,opt,name=curStart,proto3" json:"curStart,omitempty"`
	// curLength - The length of the current data (in bytes).
	CurLength int32 `protobuf:"varint,3,opt,name=curLength,proto3" json:"curLength,omitempty"`
	// hashData - This is the hash of each paragraph.
	HashData string `protobuf:"bytes,4,opt,name=hashData,proto3" json:"hashData,omitempty"`
	// totalHashData - If multiple messages return data, this is the hash value of all data, only sent in the last message.
	TotalHashData string `protobuf:"bytes,5,opt,name=totalHashData,proto3" json:"totalHashData,omitempty"`
	// data - binary data
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	// error - error string
	Error string `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
	// markdownData - If the data does not exceed 4mb, this is the data that is directly available.
	MarkdownData *MarkdownData `protobuf:"bytes,200,opt,name=markdownData,proto3" json:"markdownData,omitempty"`
	// token - API token
	Token                string   `protobuf:"bytes,300,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarkdownStream) Reset()         { *m = MarkdownStream{} }
func (m *MarkdownStream) String() string { return proto.CompactTextString(m) }
func (*MarkdownStream) ProtoMessage()    {}
func (*MarkdownStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_adachatbot_f803e5f523c93805, []int{2}
}
func (m *MarkdownStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarkdownStream.Unmarshal(m, b)
}
func (m *MarkdownStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarkdownStream.Marshal(b, m, deterministic)
}
func (dst *MarkdownStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkdownStream.Merge(dst, src)
}
func (m *MarkdownStream) XXX_Size() int {
	return xxx_messageInfo_MarkdownStream.Size(m)
}
func (m *MarkdownStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkdownStream.DiscardUnknown(m)
}

var xxx_messageInfo_MarkdownStream proto.InternalMessageInfo

func (m *MarkdownStream) GetTotalLength() int32 {
	if m != nil {
		return m.TotalLength
	}
	return 0
}

func (m *MarkdownStream) GetCurStart() int32 {
	if m != nil {
		return m.CurStart
	}
	return 0
}

func (m *MarkdownStream) GetCurLength() int32 {
	if m != nil {
		return m.CurLength
	}
	return 0
}

func (m *MarkdownStream) GetHashData() string {
	if m != nil {
		return m.HashData
	}
	return ""
}

func (m *MarkdownStream) GetTotalHashData() string {
	if m != nil {
		return m.TotalHashData
	}
	return ""
}

func (m *MarkdownStream) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MarkdownStream) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *MarkdownStream) GetMarkdownData() *MarkdownData {
	if m != nil {
		return m.MarkdownData
	}
	return nil
}

func (m *MarkdownStream) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// ResourceInfo - resource infomation
type ResourceInfo struct {
	// hashName - hashname
	HashName string `protobuf:"bytes,1,opt,name=hashName,proto3" json:"hashName,omitempty"`
	// citedTimes - cited times
	CitedTimes int32 `protobuf:"varint,2,opt,name=citedTimes,proto3" json:"citedTimes,omitempty"`
	// createTime - Creation time in seconds
	CreateTime int64 `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// type - resource type
	Type ResourceType `protobuf:"varint,4,opt,name=type,proto3,enum=adachatbotpb.ResourceType" json:"type,omitempty"`
	// children - children resource hashname
	Children             []string `protobuf:"bytes,10,rep,name=children,proto3" json:"children,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceInfo) Reset()         { *m = ResourceInfo{} }
func (m *ResourceInfo) String() string { return proto.CompactTextString(m) }
func (*ResourceInfo) ProtoMessage()    {}
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_adachatbot_f803e5f523c93805, []int{3}
}
func (m *ResourceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceInfo.Unmarshal(m, b)
}
func (m *ResourceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceInfo.Marshal(b, m, deterministic)
}
func (dst *ResourceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceInfo.Merge(dst, src)
}
func (m *ResourceInfo) XXX_Size() int {
	return xxx_messageInfo_ResourceInfo.Size(m)
}
func (m *ResourceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceInfo proto.InternalMessageInfo

func (m *ResourceInfo) GetHashName() string {
	if m != nil {
		return m.HashName
	}
	return ""
}

func (m *ResourceInfo) GetCitedTimes() int32 {
	if m != nil {
		return m.CitedTimes
	}
	return 0
}

func (m *ResourceInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ResourceInfo) GetType() ResourceType {
	if m != nil {
		return m.Type
	}
	return ResourceType_RT_PAGE
}

func (m *ResourceInfo) GetChildren() []string {
	if m != nil {
		return m.Children
	}
	return nil
}

// ReplyMarkdown - reply
type ReplyMarkdown struct {
	// url - url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// hashName - hashname
	HashName string `protobuf:"bytes,2,opt,name=hashName,proto3" json:"hashName,omitempty"`
	// lstRes - resource list
	LstRes []*ResourceInfo `protobuf:"bytes,10,rep,name=lstRes,proto3" json:"lstRes,omitempty"`
	// err - error
	Err                  string   `protobuf:"bytes,100,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyMarkdown) Reset()         { *m = ReplyMarkdown{} }
func (m *ReplyMarkdown) String() string { return proto.CompactTextString(m) }
func (*ReplyMarkdown) ProtoMessage()    {}
func (*ReplyMarkdown) Descriptor() ([]byte, []int) {
	return fileDescriptor_adachatbot_f803e5f523c93805, []int{4}
}
func (m *ReplyMarkdown) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyMarkdown.Unmarshal(m, b)
}
func (m *ReplyMarkdown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyMarkdown.Marshal(b, m, deterministic)
}
func (dst *ReplyMarkdown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyMarkdown.Merge(dst, src)
}
func (m *ReplyMarkdown) XXX_Size() int {
	return xxx_messageInfo_ReplyMarkdown.Size(m)
}
func (m *ReplyMarkdown) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyMarkdown.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyMarkdown proto.InternalMessageInfo

func (m *ReplyMarkdown) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ReplyMarkdown) GetHashName() string {
	if m != nil {
		return m.HashName
	}
	return ""
}

func (m *ReplyMarkdown) GetLstRes() []*ResourceInfo {
	if m != nil {
		return m.LstRes
	}
	return nil
}

func (m *ReplyMarkdown) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*UserInfo)(nil), "adachatbotpb.UserInfo")
	proto.RegisterType((*MarkdownData)(nil), "adachatbotpb.MarkdownData")
	proto.RegisterMapType((map[string][]byte)(nil), "adachatbotpb.MarkdownData.BinaryDataEntry")
	proto.RegisterType((*MarkdownStream)(nil), "adachatbotpb.MarkdownStream")
	proto.RegisterType((*ResourceInfo)(nil), "adachatbotpb.ResourceInfo")
	proto.RegisterType((*ReplyMarkdown)(nil), "adachatbotpb.ReplyMarkdown")
	proto.RegisterEnum("adachatbotpb.ChatPlatformType", ChatPlatformType_name, ChatPlatformType_value)
	proto.RegisterEnum("adachatbotpb.ResourceType", ResourceType_name, ResourceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdaChatBotClient is the client API for AdaChatBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdaChatBotClient interface {
	// procMarkdown - proc markdown
	ProcMarkdown(ctx context.Context, opts ...grpc.CallOption) (AdaChatBot_ProcMarkdownClient, error)
}

type adaChatBotClient struct {
	cc *grpc.ClientConn
}

func NewAdaChatBotClient(cc *grpc.ClientConn) AdaChatBotClient {
	return &adaChatBotClient{cc}
}

func (c *adaChatBotClient) ProcMarkdown(ctx context.Context, opts ...grpc.CallOption) (AdaChatBot_ProcMarkdownClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdaChatBot_serviceDesc.Streams[0], "/adachatbotpb.AdaChatBot/procMarkdown", opts...)
	if err != nil {
		return nil, err
	}
	x := &adaChatBotProcMarkdownClient{stream}
	return x, nil
}

type AdaChatBot_ProcMarkdownClient interface {
	Send(*MarkdownStream) error
	CloseAndRecv() (*ReplyMarkdown, error)
	grpc.ClientStream
}

type adaChatBotProcMarkdownClient struct {
	grpc.ClientStream
}

func (x *adaChatBotProcMarkdownClient) Send(m *MarkdownStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adaChatBotProcMarkdownClient) CloseAndRecv() (*ReplyMarkdown, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReplyMarkdown)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdaChatBotServer is the server API for AdaChatBot service.
type AdaChatBotServer interface {
	// procMarkdown - proc markdown
	ProcMarkdown(AdaChatBot_ProcMarkdownServer) error
}

func RegisterAdaChatBotServer(s *grpc.Server, srv AdaChatBotServer) {
	s.RegisterService(&_AdaChatBot_serviceDesc, srv)
}

func _AdaChatBot_ProcMarkdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdaChatBotServer).ProcMarkdown(&adaChatBotProcMarkdownServer{stream})
}

type AdaChatBot_ProcMarkdownServer interface {
	SendAndClose(*ReplyMarkdown) error
	Recv() (*MarkdownStream, error)
	grpc.ServerStream
}

type adaChatBotProcMarkdownServer struct {
	grpc.ServerStream
}

func (x *adaChatBotProcMarkdownServer) SendAndClose(m *ReplyMarkdown) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adaChatBotProcMarkdownServer) Recv() (*MarkdownStream, error) {
	m := new(MarkdownStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AdaChatBot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adachatbotpb.AdaChatBot",
	HandlerType: (*AdaChatBotServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "procMarkdown",
			Handler:       _AdaChatBot_ProcMarkdown_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "adachatbot.proto",
}

func init() { proto.RegisterFile("adachatbot.proto", fileDescriptor_adachatbot_f803e5f523c93805) }

var fileDescriptor_adachatbot_f803e5f523c93805 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xee, 0x3a, 0x1f, 0x4d, 0x26, 0x6e, 0x5f, 0x6b, 0xd5, 0xb7, 0xb2, 0x42, 0x55, 0x45, 0x16,
	0x42, 0xa1, 0x87, 0x1c, 0xcc, 0x05, 0x21, 0x21, 0xd4, 0x8f, 0xa8, 0x2d, 0xea, 0x97, 0xb6, 0xee,
	0x89, 0x43, 0xb5, 0x89, 0xb7, 0xc4, 0xaa, 0x63, 0x9b, 0xf5, 0x1a, 0xe4, 0x33, 0x37, 0xfe, 0x06,
	0x57, 0x0e, 0x9c, 0xf8, 0x0d, 0xfc, 0x2c, 0xb4, 0x13, 0x3b, 0xb1, 0xa3, 0xf6, 0xb6, 0xcf, 0xcc,
	0xb3, 0x33, 0xf3, 0xcc, 0xcc, 0x2e, 0x58, 0xdc, 0xe7, 0xd3, 0x19, 0x57, 0x93, 0x58, 0x8d, 0x12,
	0x19, 0xab, 0x98, 0x9a, 0x2b, 0x4b, 0x32, 0x71, 0x7e, 0x10, 0xe8, 0xdc, 0xa5, 0x42, 0x9e, 0x47,
	0x0f, 0x31, 0x75, 0xa1, 0xa9, 0xf2, 0x44, 0xd8, 0x64, 0x40, 0x86, 0xdb, 0xee, 0xfe, 0xa8, 0xca,
	0x1c, 0x1d, 0xcf, 0xb8, 0xba, 0x09, 0xb9, 0x7a, 0x88, 0xe5, 0xdc, 0xcb, 0x13, 0xc1, 0x90, 0x4b,
	0x5d, 0xd8, 0xa9, 0x7a, 0xee, 0xa2, 0xe0, 0x4b, 0x26, 0xce, 0x4f, 0x6c, 0x63, 0x40, 0x86, 0x5d,
	0xf6, 0xa4, 0x8f, 0xee, 0x42, 0x3b, 0xd3, 0x39, 0x4f, 0x6c, 0x7f, 0x40, 0x86, 0x0d, 0x56, 0x20,
	0xe7, 0xa7, 0x01, 0xe6, 0x25, 0x97, 0x8f, 0x7e, 0xfc, 0x2d, 0x3a, 0xe1, 0x8a, 0x53, 0x1b, 0x36,
	0x53, 0x25, 0xf5, 0x11, 0x6b, 0xea, 0xb2, 0x12, 0xd2, 0x8f, 0x00, 0x93, 0x20, 0xe2, 0x32, 0x47,
	0xa7, 0x31, 0x68, 0x0c, 0x7b, 0xee, 0x41, 0xbd, 0xe0, 0x6a, 0xa4, 0xd1, 0xd1, 0x92, 0x3c, 0x8e,
	0x94, 0xcc, 0x59, 0xe5, 0x36, 0x75, 0xc0, 0x54, 0x62, 0x9e, 0x84, 0x5c, 0x89, 0x2b, 0x3e, 0x17,
	0x36, 0x60, 0xaa, 0x9a, 0xad, 0xca, 0xc1, 0x8c, 0xbd, 0x3a, 0x07, 0xe3, 0xbc, 0x02, 0x23, 0x0b,
	0x50, 0x52, 0xcf, 0xdd, 0xad, 0xd7, 0x52, 0xb6, 0x98, 0x19, 0x59, 0xd0, 0x7f, 0x0f, 0xff, 0xad,
	0x95, 0x43, 0x2d, 0x68, 0x3c, 0x8a, 0xbc, 0x10, 0xa9, 0x8f, 0x74, 0x07, 0x5a, 0x5f, 0x79, 0x98,
	0x09, 0x6c, 0xa4, 0xc9, 0x16, 0xe0, 0x9d, 0xf1, 0x96, 0x38, 0xbf, 0x0d, 0xd8, 0x2e, 0xb5, 0xdd,
	0x2a, 0x29, 0xf8, 0x9c, 0x0e, 0xa0, 0xa7, 0x62, 0xc5, 0xc3, 0x0b, 0x11, 0x7d, 0x56, 0x33, 0x0c,
	0xd3, 0x62, 0x55, 0x13, 0xed, 0x43, 0x67, 0x9a, 0xc9, 0x5b, 0xc5, 0xa5, 0xc2, 0x88, 0x2d, 0xb6,
	0xc4, 0x74, 0x0f, 0xba, 0xd3, 0x4c, 0x16, 0x77, 0x1b, 0xe8, 0x5c, 0x19, 0xf4, 0xcd, 0x19, 0x4f,
	0x67, 0xa8, 0xba, 0x89, 0xf5, 0x2d, 0x31, 0x7d, 0x09, 0x5b, 0x98, 0xe4, 0xac, 0x24, 0xb4, 0x90,
	0x50, 0x37, 0x52, 0x0a, 0x4d, 0x5f, 0x3b, 0xdb, 0xa8, 0x04, 0xcf, 0x5a, 0x9e, 0x90, 0x32, 0x96,
	0xd8, 0xae, 0x2e, 0x5b, 0x00, 0xfa, 0x01, 0xcc, 0x79, 0x65, 0x6a, 0xf6, 0x5f, 0x82, 0xcd, 0xec,
	0x3f, 0x3f, 0x58, 0x56, 0xbb, 0x40, 0xff, 0x87, 0x96, 0x8a, 0x1f, 0x45, 0x64, 0xff, 0x5a, 0xec,
	0xdf, 0x02, 0x39, 0x7f, 0x08, 0x98, 0x4c, 0xa4, 0x71, 0x26, 0xa7, 0x02, 0x37, 0xbd, 0x10, 0x85,
	0xe3, 0x26, 0x2b, 0x51, 0x38, 0xea, 0x7d, 0x80, 0x69, 0xa0, 0x84, 0xef, 0x05, 0x73, 0x91, 0x16,
	0xcd, 0xaa, 0x58, 0xd0, 0x2f, 0x05, 0x57, 0x42, 0x43, 0xec, 0x57, 0x83, 0x55, 0x2c, 0x74, 0x54,
	0xbc, 0xa2, 0x26, 0xbe, 0xa2, 0xb5, 0xda, 0xcb, 0x2a, 0x2a, 0x2f, 0x48, 0x8f, 0x66, 0x16, 0x84,
	0xbe, 0x14, 0x91, 0x0d, 0x83, 0x86, 0xae, 0xa5, 0xc4, 0xce, 0x77, 0x02, 0x5b, 0x4c, 0x24, 0x61,
	0x5e, 0x6a, 0xd6, 0x9b, 0x92, 0xc9, 0xb0, 0xdc, 0x94, 0x4c, 0x86, 0x35, 0x2d, 0xc6, 0x9a, 0x16,
	0x17, 0xda, 0x61, 0xaa, 0x98, 0x48, 0x31, 0x72, 0xef, 0xb9, 0x6a, 0x70, 0x35, 0x0b, 0xa6, 0xce,
	0x20, 0x64, 0x39, 0x18, 0x7d, 0x3c, 0x70, 0xc1, 0x5a, 0x7f, 0xfd, 0xd4, 0x84, 0xce, 0xf1, 0x8d,
	0x77, 0x7f, 0x75, 0x7d, 0x35, 0xb6, 0x36, 0xa8, 0x05, 0xa6, 0x46, 0xde, 0xf8, 0x62, 0x7c, 0xca,
	0x0e, 0x2f, 0x2d, 0x72, 0xf0, 0x7a, 0xd5, 0x71, 0xe4, 0xf7, 0x60, 0x93, 0x79, 0xf7, 0x37, 0x87,
	0xa7, 0x9a, 0x6e, 0x42, 0x87, 0x79, 0xf7, 0xd7, 0xde, 0xd9, 0x98, 0x59, 0xc4, 0xfd, 0x04, 0x70,
	0xe8, 0x73, 0x9d, 0xe1, 0x28, 0x56, 0xf4, 0x12, 0xcc, 0x44, 0xc6, 0xd3, 0xa5, 0xe0, 0xbd, 0xa7,
	0x87, 0xbf, 0xd8, 0xfc, 0xfe, 0x8b, 0x75, 0x41, 0x95, 0x5e, 0x39, 0x1b, 0x43, 0x32, 0x69, 0xe3,
	0xaf, 0xf7, 0xe6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x0f, 0x02, 0xfc, 0x09, 0x05, 0x00,
	0x00,
}
